# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  node: circleci/node@4.5.1
  jq: circleci/jq@2.2
  gcp-cli: circleci/gcp-cli@2.2.0
  # Declare a dependency on the welcome-orb

commands:
  deploy:
    description: "deploy node"
    parameters:
      project:
        type: string
        default: "cmp-mutu"
      bucket:
        type: string
        default: "node-spkz-dev"
      snapshot:
        type: boolean
        default: true
    steps:
      - run:
          name: show parameters
          command: echo << parameters.project >> && echo << parameters.bucket >> && echo << parameters.snapshot >>
      - checkout
      - jq/install
      - run:
          name: login to npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: version tag
          command: |
            if [ << parameters.snapshot >> = true ]; then
              export VERSION_TAG=`cat ./package.json | jq -r .version`.SNAPSHOT && echo "export VERSION_TAG=$VERSION_TAG" >> $BASH_ENV
            else
              export VERSION_TAG=`cat ./package.json | jq -r .version` && echo "export VERSION_TAG=$VERSION_TAG" >> $BASH_ENV
            fi
      - run:
          working_directory: temp
          name: install package
          command: npm i @arianeeprivate/arianee-bdh@$VERSION_TAG
      - run:
          working_directory: temp
          name: create dir dist
          command: mkdir ./dist
      - run:
          working_directory: temp
          name: copy to dist
          command: cp -r ./node_modules/@arianeeprivate/arianee-bdh/* ./dist
      - run:
          working_directory: temp
          name: ls
          command: ls -al ./dist/
      - run:
          name: add gcp project to ENV
          command: |
            echo "export GOOGLE_PROJECT_ID=<< parameters.project >>" >> $BASH_ENV
            echo "export CLOUDSDK_GSUTIL_PYTHON=python3" >> $BASH_ENV
      - run:
          name: setup crcmod
          command: |
            sudo apt-get install gcc python3-dev python3-setuptools
            sudo pip3 uninstall crcmod
            sudo pip3 install --no-cache-dir -U crcmod
      - gcp-cli/install
      - run:
          command: |
            # Store service account

            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json


            # Initialize gcloud CLI

            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json

            gcloud --quiet config set project $GOOGLE_PROJECT_ID


            if [ "$GOOGLE_COMPUTE_ZONE" != "" ]; then
              gcloud --quiet config set compute/zone $GOOGLE_COMPUTE_ZONE
            fi
            if [ "$GOOGLE_COMPUTE_REGION" != "" ]; then
              gcloud --quiet config set compute/region $GOOGLE_COMPUTE_REGION
            fi
          name: initialize gcloud CLI to connect to Google Cloud
      - run: |
          echo "export BOTO_CONFIG=/dev/null" >> $BASH_ENV
          gsutil version -l
      - run:
          working_directory: temp
          name: gcp sync files
          command: gsutil -m rsync -d -r ./dist/ gs://<< parameters.bucket >>
  login-npm:
    description: "login to node"
    steps:
      - run:
          name: login to npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

jobs:
  test:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - checkout
      - login-npm
      - node/install-packages
      - run:
          name: test
          command: npm run test

  build:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - checkout
      - login-npm
      - node/install-packages
      - run:
          name: prepare env
          command: rm docker-compose.yml && mv .circleci/docker-compose.yml ./
      - run:
          name: build
          command: npm run build
      - persist_to_workspace:
          root: ./
          paths:
            - dist
            - migrate

  package-develop:
    docker:
      - image: cimg/node:14.17.6
    steps:
        - checkout
        - node/install-packages
        - jq/install
        - attach_workspace:
              at: ./
        - run:
            name: version tag
            command: export VERSION_TAG=`cat ./package.json | jq -r .version`.SNAPSHOT && echo "export VERSION_TAG=$VERSION_TAG" >> $BASH_ENV
        - run:
            name: version snapshot
            command: export VERSION_SNAPSHOT=`cat ./package.json | jq -r .version`-SNAPSHOT.$(date +%s) && echo "export VERSION_SNAPSHOT=$VERSION_SNAPSHOT" >> $BASH_ENV
        - run:
            name: version old snapshot
            command: export OLD_SNAPSHOT=`npm view @arianeeprivate/arianee-bdh@$VERSION_TAG version` && echo "export OLD_SNAPSHOT=$OLD_SNAPSHOT" >> $BASH_ENV

  release:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - checkout
      - node/install-packages
      - run:
          name: set git email
          command: git config --global user.email "tech@arianee.org"
      - run:
          name: set git name
          command: git config --global user.name "Arianee Deployer"
      - run:
          name: remote origin url git
          command: git config --get remote.origin.url
      - run:
          name: setup push git commits & tags simultaneously
          command: git config --global push.followTags true
      - run:
          name: version
          command: export VERSION=`cat ./package.json | jq -r .version` && echo "export VERSION=$VERSION" >> $BASH_ENV
      - run:
          name: push tag && update version
          command: node ./.circleci/update-version.js ${VERSION}

  package-master:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - checkout
      - node/install-packages
      - jq/install
      - attach_workspace:
          at: ./www
      - run:
          name: login to npm
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: version
          command: export VERSION=`cat ./package.json | jq -r .version` && echo "export VERSION=$VERSION" >> $BASH_ENV
      - run:
          name: set version in package.json
          command: cp ./publish-package.json ./www/package.json && sed -i -e "s/VERSION-CI/$VERSION/g" ./www/package.json
      - run:
          working_directory: www
          name: publish
          command: npm publish

  deploy-develop:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - deploy


  deploy-uat:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - deploy:
          project: shared-preprod-1
          bucket: bdh-front-uat
          snapshot: false
  deploy-prod:
    docker:
      - image: cimg/node:14.17.6
    steps:
      - deploy:
          project: shared-prod-1
          bucket: bdh-front-prod-1
          snapshot: false

workflows:
  build_test_package:
    jobs:
      - test
      - build:
          requires:
            - test
          filters:
            branches:
              only:
               - develop
               - master
      - package-develop:
          requires:
            - build
          filters:
            branches:
              only: develop
      - release:
          requires:
            - build
          filters:
            branches:
              only: master
      - package-master:
          requires:
            - release
          filters:
            branches:
              only: master
      - deploy-develop:
          requires:
            - package-develop
          filters:
            branches:
              only: develop
      - approval-uat:
          type: approval
          requires:
            - package-master
          filters:
            branches:
              only: master
      - deploy-uat:
          requires:
            - approval-uat
          filters:
            branches:
              only: master
      - approval-prod:
          type: approval
          requires:
            - package-master
          filters:
            branches:
              only: master
      - deploy-prod:
          requires:
            - approval-prod
          filters:
            branches:
              only: master


